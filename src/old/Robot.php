<?php
/**
* This class is responsible for doing all operation related to Robot
*/
namespace Src;

class Robot implements RobotInterface
{

    private $x_axis = 0;
    private $y_axis = 0;
    private $direction = 0;
    private $orders = array();
    const NORTH = 0;
    const EAST = 1;
    const SOUTH = 2;
    const WEST = 3;
    
    /**
    *moveRight function used to update robot direction bases of current direction  
    *clockwise
    *return void
    */
    public function moveRight(): void
    {
        if (self::NORTH<=$this->direction && $this->direction<=self::SOUTH) {
                $this->direction = $this->direction+1;
        } else {
                $this->direction = 0;
        }
    }
    
    /**
    *moveLeft function used to update robot direction bases of current direction
    *anit clockwise
    *return void
    */
    public function moveLeft(): void
    {
        if ($this->direction>self::NORTH) {
            $this->direction = $this->direction-1;
        } else {
            $this->direction = 3;
        }
    }
    
    /**
    *walk function used to update robot location in Y axis and X axis based on cureent
    *direction
    *the function accept stpes  integer as argument with defualt value = 1
    *return void
    */
    public function walk(int $steps = 1): void
    {
        switch ($this->direction) {
            case self::NORTH:
                $this->y_axis = $this->y_axis + $steps;
                break;

            case self::EAST:
                $this->x_axis = $this->x_axis + $steps;
                break;

            case self::SOUTH:
                $this->y_axis = $this->y_axis - $steps;
                break;

            case self::WEST:
                $this->x_axis = $this->x_axis - $steps;
                break;
            default:
                break;
        }
    }

    /**
    *exe function convert tokens generated by parser into commands of this class
    *it's accept tokens, each token call a function within this class such that updating
    *the bot location or direcotion
    *return void
    */
    public function exe($orders)
    {
        foreach ($orders as $order) {
            switch ($order[0]) {
                case 'R':
                    $this->moveRight();
                    break;

                case 'L':
                    $this->moveLeft();
                    break;

                case 'W':
                    $this->walk(1);
                    break;
                default:
                    break;
            }
        }
    }
    
    /**
    *Return current x_axis value
    */
    public function getX()
    {
        return $this->x_axis;
    }
    
    /**
    *Return current y_axis value
    */
    public function getY()
    {
        return $this->y_axis;
    }

    /**
    *Set Bot direction to un logical value to test unreachable test cases
    */
    public function setDirectonForTesting()
    {
        $this->direction=100;
    }
    
    /**
    *Return current bot direction value
    */
    public function getDirection()
    {
        switch ($this->direction) {
            case self::NORTH:
                return "North";
                break;

            case self::EAST:
                return "East";
                break;

            case self::SOUTH:
                return "South";
                break;

            case self::WEST:
                return "West";
                break;
            default:
                return "Lost";
                break;
        }
    }
}
